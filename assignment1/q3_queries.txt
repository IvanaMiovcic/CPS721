
% Enter the names of your group members below.
% If you only have 2 group members, leave the last space blank
%
%%%%%
%%%%% NAME: Ivana Miovcic 
%%%%% NAME: Mishelle Bitman
%%%%% NAME: Daniel Persaud
%
% Add your queries below. Please use the following format
% 
% %%%%% QUERY 2
% % EXPLANATION: Checks if there is a block on blockA
% on(X, blockA).
%
% where 2 is the number of the query. The EXPLANATION line should contain your explanation 
% in English of what the query tests. Omit the "%" on the line with the query
% Don't forget to end queries with a period.

%%%%%% QUERY 1
% EXPLANATION: Test a simple pass between r3 and r1 requiring a single move
canPass(r3, r1, 1).



%%%%%% QUERY 2
% EXPLANATION: Test an indirect pass between r2 and r5 requiring two moves
canPass(r2, r5, 2).


%%%%%% QUERY 3
% EXPLANATION: Test an indirect pass between r3 and r6 requiring three moves
canPass(r3, r6, 3).



%%%%%% QUERY 4
% EXPLANATION: Test a pass with the same robot r1 as source and destination
canPass(r1, r1, 2).



%%%%%% QUERY 5
% EXPLANATION: Test a pass between a robot r1 and the net 
canPass(r1, net, 1).



%%%%%% QUERY 6
% EXPLANATION: Check if r1 can score in one move
canScore(r1, 1).



%%%%%% QUERY 7
% EXPLANATION: Check if r3 can score in two moves which is one extra move then it needs
canScore(r3,2).



%%%%%% QUERY 8
% EXPLANATION: Confirm a pass with too little moves will fail in this case r4 to r1
canPass(r4, r1, 1).


%%%%%% QUERY 9
% EXPLANATION: Test for a symmetric pass between robots r2 and r3
canPass(r2, r3, 1).


%%%%%% QUERY 10
% EXPLANATION: Check if any robot can score in 3 moves 
canScore(R, 3).

%%%%%% QUERY 11
% EXPLANATION: Check if a robot r2 can score in 3 moves (confirms that a robot can only score if it is directly connected to net)
canScore(r2, 3).


%%%%%% YOU MAY CHOOSE TO ADD MORE THAN 10 QUERIES HERE
%%%%%% HOWEVER, ONLY THE FIRST 10 WILL BE MARKED


%%%%% INTERACTION
%
% Add your interaction below.
% 
?- canPass(r3, r1, 1).
Yes (0.00s cpu, solution 1, maybe more)
No (0.01s cpu)

?- canPass(r2, r5, 2).
Yes (0.00s cpu, solution 1, maybe more)
No (0.02s cpu)

?- canPass(r3, r6, 3).
Yes (0.00s cpu, solution 1, maybe more)
No (0.07s cpu)

?- canPass(r1, r1, 2).
Yes (0.00s cpu, solution 1, maybe more)
Yes (0.03s cpu, solution 2, maybe more)
Yes (0.03s cpu, solution 3, maybe more)
No (0.04s cpu)

?- canPass(r1, net, 1).
No (0.00s cpu)

?- canScore(r1, 1).
No (0.00s cpu)

?- canScore(r3, 2).
Yes (0.00s cpu, solution 1, maybe more)
No (0.02s cpu)

?- canPass(r4, r1, 1).
No (0.00s cpu)

?- canPass(r2, r3, 1).
Yes (0.00s cpu, solution 1, maybe more)
No (0.02s cpu)

?- canScore(R, 3).
R = r3
Yes (0.00s cpu, solution 1, maybe more)
R = r1
Yes (0.01s cpu, solution 2, maybe more)
R = r4
Yes (0.02s cpu, solution 3, maybe more)
R = r1
Yes (0.02s cpu, solution 4, maybe more)
R = r3
Yes (0.03s cpu, solution 5, maybe more)
R = r3
Yes (0.03s cpu, solution 6, maybe more)
R = r3
Yes (0.04s cpu, solution 7, maybe more)
No (0.04s cpu)

?- canScore(r2, 3).
No (0.00s cpu)